====================
Apricos Architecture
====================

64KB of main address space
256 bytes of stack space (shared with main address space)

8 bit ISA, 16 possible operations.


10 registers:

$ip    16-bit instruction pointer
$mr    16-bit memory address register
$dr    8-bit memory data register
$ir    16-bit instruction register
$ia    8-bit optional instruction argument
$sp    8-bit Stack register (Or stack pointer)
$ar1-4 4 8-bit accumulators
$fr    8-bit CPU status flags register

NOTES:
$ip and $mr are actually adders connected to D flipflops, where the second operand is 4 bits wide.

Flags register: [  .  .  .  .  S  N  Z  P  ]
S = Sign extend mode
N = Negative result
Z = Zero result
P = Positive result

=====
 ISA
=====

OP Code	|  Instruction	|  Description
-----------------------------------------------------------------------------------------
0000	|  ADD		|  Add a value to the accumulator
0001	|  AND		|  AND a value with the accumulator
0010	|  OR		|  OR a value with the accumulator
0011	|  XOR		|  XOR a value with the accumulator
0100	|  NOT		|  NOT the accumulator
0101	|  SHF		|  SHIFT the accumulator either left or right
0110	|  LD		|  Load a value from memory into the accumulator
0111	|  LDI		|  Load a value from memory using an immediate PC offset
1000	|  ST		|  Store the accumulator to memory
1001	|  STI		|  Store the accumulator to memory using an immesiate PC offset
1010	|  STK		|  Stack push/pop
1011	|  LA		|  Store an immediate address into the MAR or the accumulator
1100	|  BR		|  Branch
1101	|  PRT		|  Port I/O
1110	|  ASET  	|  Set the current active accumulator
1111	|  RESERVED	|  Reserved opcode

===================
Instruction details
===================
x = don't care
(n) = operand size
$ar = currently selected accumulator

-----
 ADD
-----

0000 imm(4)

$ar += imm

-----
 AND
-----

0001 imm(4)

$ar &= imm

----
 OR
----

0010 imm(4)

$ar |= imm


-----
 XOR
-----

0011 imm(4)

$ar ^= imm

-----
 NOT
-----

0100 xxxx

$ar = !$ar

-----
 SHF
-----

0101 direction(1) x count(2)

if direction == 1:
    $ar >> count-1
else
    $ar << count-1

Note that count is offset by 1.
This means that 00 will correspond to 
a shift of 1, 01 to a shift of 2, etc.


----
 LD
----

0110 addressWrite(1) writeHigh(1) xx

if addressWrite == 1:
    if writeHigh == 1:
        $mr |= ($ar << 8)
    else
        $mr |= ($ar)
else
    $ar = memory[$mr]


-----
 LDI
-----

0111 xxxx
ipoffset(8)

$ar = memory[$ip + ipoffset]


----
 ST
----

1000 addressWrite(1) writeHigh(1) xx

if addressWrite == 1:
    if writeHigh == 1:
        $mr |= ($ar << 8)
    else
        $mr |= ($ar)
else
    memory[$mr] = $ar


-----
 STI
-----

1001 xxxx
ipoffset(8)

memory[$ip + ipoffset] = $ar


-----
 STK
-----

1010 pop(1) operation(3)

if pop == 1:
    if operation == 100b:
        $ar += memory[$sp]

    else if operation == 101b:
        $ar &= memory[$sp]

    else if operation == 110b:
        $ar |= memory[$sp] 

    else if operation == 111b:
        $ar ^= memory[$sp] 

    else:
        $ar = memory[$sp]

    $sp = $sp - 1

else:
    $sp = $sp + 1
    memory[$sp] = $ar

-----
 LA
-----

1011 loadHigh(1) destination(1) xx
address(8)

if loadHigh == 0:
    if destination == 0:
        $mr[0-7] = address
    else:
        $ar = address
else:
    if destination == 0:
        $mr[8-15] = address
    else:
        $ar = address

----
 BR
----

1100 n(1) z(1) p(1) useImmAddress(1)
immAddress(8)

if (!useImmAddress):
    if (n == 1 && $fr[N] == 1) || (z == 1 && $fr[Z] == 1) || (p == 1 && $fr[P] == 1):
        $ip = $mr
else:
    $ip[0-7] = immAddress



-----
 PRT
-----

1101 direction(1) id(3)

if direction == 1
    write data to port #id
else
    read data from port #id


------
 ASET
------

1110 aID(4)

Set the current active accumulator to accumulator #aID


============
 TODO/NOTES
============

It should be possible for offset based instructions 
to conditionally load an extra byte dependant on whether 
any of the last 4 bits of the instruction is non-zero. 
This is subject to implementation complications, and 
will be explored in the future.
